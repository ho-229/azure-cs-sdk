// Code generated by "enumer -type=Region -linecomment -json -trimprefix Region"; DO NOT EDIT.

package azuretexttospeech

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RegionName = "AustraliaEastBrazilSouthCanadaCentralCentralUSEastAsiaEastUSEastUS2FranceCentralIndiaCentralJapanEastJapanWestKoreaCentralNorthCentralUSNorthEuropeSouthCentralUSSoutheastAsiaUKSouthWestEuropeWestUSWestUS2"

var _RegionIndex = [...]uint8{0, 13, 24, 37, 46, 54, 60, 67, 80, 92, 101, 110, 122, 136, 147, 161, 174, 181, 191, 197, 204}

const _RegionLowerName = "australiaeastbrazilsouthcanadacentralcentraluseastasiaeastuseastus2francecentralindiacentraljapaneastjapanwestkoreacentralnorthcentralusnortheuropesouthcentralussoutheastasiauksouthwesteuropewestuswestus2"

func (i Region) String() string {
	if i < 0 || i >= Region(len(_RegionIndex)-1) {
		return fmt.Sprintf("Region(%d)", i)
	}
	return _RegionName[_RegionIndex[i]:_RegionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RegionNoOp() {
	var x [1]struct{}
	_ = x[RegionAustraliaEast-(0)]
	_ = x[RegionBrazilSouth-(1)]
	_ = x[RegionCanadaCentral-(2)]
	_ = x[RegionCentralUS-(3)]
	_ = x[RegionEastAsia-(4)]
	_ = x[RegionEastUS-(5)]
	_ = x[RegionEastUS2-(6)]
	_ = x[RegionFranceCentral-(7)]
	_ = x[RegionIndiaCentral-(8)]
	_ = x[RegionJapanEast-(9)]
	_ = x[RegionJapanWest-(10)]
	_ = x[RegionKoreaCentral-(11)]
	_ = x[RegionNorthCentralUS-(12)]
	_ = x[RegionNorthEurope-(13)]
	_ = x[RegionSouthCentralUS-(14)]
	_ = x[RegionSoutheastAsia-(15)]
	_ = x[RegionUKSouth-(16)]
	_ = x[RegionWestEurope-(17)]
	_ = x[RegionWestUS-(18)]
	_ = x[RegionWestUS2-(19)]
}

var _RegionValues = []Region{RegionAustraliaEast, RegionBrazilSouth, RegionCanadaCentral, RegionCentralUS, RegionEastAsia, RegionEastUS, RegionEastUS2, RegionFranceCentral, RegionIndiaCentral, RegionJapanEast, RegionJapanWest, RegionKoreaCentral, RegionNorthCentralUS, RegionNorthEurope, RegionSouthCentralUS, RegionSoutheastAsia, RegionUKSouth, RegionWestEurope, RegionWestUS, RegionWestUS2}

var _RegionNameToValueMap = map[string]Region{
	_RegionName[0:13]:         RegionAustraliaEast,
	_RegionLowerName[0:13]:    RegionAustraliaEast,
	_RegionName[13:24]:        RegionBrazilSouth,
	_RegionLowerName[13:24]:   RegionBrazilSouth,
	_RegionName[24:37]:        RegionCanadaCentral,
	_RegionLowerName[24:37]:   RegionCanadaCentral,
	_RegionName[37:46]:        RegionCentralUS,
	_RegionLowerName[37:46]:   RegionCentralUS,
	_RegionName[46:54]:        RegionEastAsia,
	_RegionLowerName[46:54]:   RegionEastAsia,
	_RegionName[54:60]:        RegionEastUS,
	_RegionLowerName[54:60]:   RegionEastUS,
	_RegionName[60:67]:        RegionEastUS2,
	_RegionLowerName[60:67]:   RegionEastUS2,
	_RegionName[67:80]:        RegionFranceCentral,
	_RegionLowerName[67:80]:   RegionFranceCentral,
	_RegionName[80:92]:        RegionIndiaCentral,
	_RegionLowerName[80:92]:   RegionIndiaCentral,
	_RegionName[92:101]:       RegionJapanEast,
	_RegionLowerName[92:101]:  RegionJapanEast,
	_RegionName[101:110]:      RegionJapanWest,
	_RegionLowerName[101:110]: RegionJapanWest,
	_RegionName[110:122]:      RegionKoreaCentral,
	_RegionLowerName[110:122]: RegionKoreaCentral,
	_RegionName[122:136]:      RegionNorthCentralUS,
	_RegionLowerName[122:136]: RegionNorthCentralUS,
	_RegionName[136:147]:      RegionNorthEurope,
	_RegionLowerName[136:147]: RegionNorthEurope,
	_RegionName[147:161]:      RegionSouthCentralUS,
	_RegionLowerName[147:161]: RegionSouthCentralUS,
	_RegionName[161:174]:      RegionSoutheastAsia,
	_RegionLowerName[161:174]: RegionSoutheastAsia,
	_RegionName[174:181]:      RegionUKSouth,
	_RegionLowerName[174:181]: RegionUKSouth,
	_RegionName[181:191]:      RegionWestEurope,
	_RegionLowerName[181:191]: RegionWestEurope,
	_RegionName[191:197]:      RegionWestUS,
	_RegionLowerName[191:197]: RegionWestUS,
	_RegionName[197:204]:      RegionWestUS2,
	_RegionLowerName[197:204]: RegionWestUS2,
}

var _RegionNames = []string{
	_RegionName[0:13],
	_RegionName[13:24],
	_RegionName[24:37],
	_RegionName[37:46],
	_RegionName[46:54],
	_RegionName[54:60],
	_RegionName[60:67],
	_RegionName[67:80],
	_RegionName[80:92],
	_RegionName[92:101],
	_RegionName[101:110],
	_RegionName[110:122],
	_RegionName[122:136],
	_RegionName[136:147],
	_RegionName[147:161],
	_RegionName[161:174],
	_RegionName[174:181],
	_RegionName[181:191],
	_RegionName[191:197],
	_RegionName[197:204],
}

// RegionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RegionString(s string) (Region, error) {
	if val, ok := _RegionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RegionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Region values", s)
}

// RegionValues returns all values of the enum
func RegionValues() []Region {
	return _RegionValues
}

// RegionStrings returns a slice of all String values of the enum
func RegionStrings() []string {
	strs := make([]string, len(_RegionNames))
	copy(strs, _RegionNames)
	return strs
}

// IsARegion returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Region) IsARegion() bool {
	for _, v := range _RegionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Region
func (i Region) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Region
func (i *Region) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Region should be a string, got %s", data)
	}

	var err error
	*i, err = RegionString(s)
	return err
}
